import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url "https://repo.spongepowered.org/repository/maven-public" }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.github.johnrengelman:shadow:8.1.1"
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.0.+'
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'org.spongepowered.mixin'


version "1.3.0-beta"
group "gkappa.wrapfix"
archivesBaseName = "WrapFix"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'


    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            jvmArg "-Dfml.coreMods.load=gkappa.wrapfix.WrapFixLoadingPlugin"
            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            jvmArg "-Dfml.coreMods.load=gkappa.wrapfix.WrapFixLoadingPlugin"
            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    shade
    shade.extendsFrom implementation

}

repositories {
    maven { url "https://repo.spongepowered.org/maven" }
    maven {
        url "https://cfa2.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
        metadataSources {
            artifact()
        }
    }
    maven {
        url "https://maven.cleanroommc.com"
    }
    flatDir {
        dirs "libs"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    
    /*
    compileJar("org.spongepowered:mixin:0.8.5") {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }*/
    shade "com.ibm.icu:icu4j:74.2"

    // Common:
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    // ForgeGradle:
    implementation ('zone.rong:mixinbooter:9.1') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:9.1') {
        transitive = false
    }

    compileOnly fg.deobf( "curse.maven:IndustrialWiresRE-521139:3474268" )
    compileOnly fg.deobf( "curse.maven:ImmersiveEngineering-231951:2974106" )
    compileOnly fg.deobf( "curse.maven:BetterQuesting-629629:4010084" )
    runtimeOnly "curse.maven:BetterQuesting-629629:4010084"
    compileOnly fg.deobf( "curse.maven:Botania-225643:3330934" )
    compileOnly fg.deobf( "curse.maven:Psi-241665:3085917" )
    compileOnly fg.deobf( "curse.maven:Baubles-227083:2518667" )
    implementation "com.cleanroommc:configanytime:3.0"


    //compileOnly ("blus:immersiveengineering:0.12-98")
    //compileOnly ("mantle:industrialwires:1.8-38")
    //compileOnly ("loli:mixinbooter:3.2")
    //compileOnly ("funguy:betterquesting:3.5.329")

    //runtimeOnly "curse.maven:MixinBooter-419286:3687785"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "FMLCorePluginContainsFMLMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "FMLCorePlugin": "gkappa.wrapfix.WrapFixLoadingPlugin",
                "ForceLoadAsMod": "true"
        ])
    }
    //finalizedBy('reobfJar')
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

java {
    withSourcesJar()
}


publishing {
  repositories {
    maven {
      name = "outlands"
      url = "https://maven.outlands.top/releases"
      credentials(PasswordCredentials)
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
  publications {
    maven(MavenPublication) {
      groupId = "gkappa"
      artifactId = "wrapfix"
      version = version
      from components.java
    }
  }
}

mixin {
    add sourceSets.main, "mixins.wrapfix.refmap.json"
    disableAnnotationProcessorCheck()
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shade]
    relocate('com.ibm.icu','repack.com.ibm.icu')
    dependencies {
        include(dependency("com.ibm.icu:icu4j:74.2"))
    }
    manifest {
        inheritFrom jar.manifest
    }
    finalizedBy('reobfShadowJar')
}

assemble.dependsOn shadowJar
tasks.shadowJar.dependsOn("reobfJar")
reobf {
    shadowJar {}
}

artifacts {
    archives shadowJar
    archives sourcesJar
}
